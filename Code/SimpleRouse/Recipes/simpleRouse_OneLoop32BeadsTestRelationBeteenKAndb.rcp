<description> Describe the simulation here... </description>
<func> SetRecipeParams </func>
%Insert parameters as obj.params.[paramsName]=[paramsValue]
obj.params.numRounds = 3;
obj.params.connectedBeads = [1 16];

<func> PreSimulationBatchActions </func>
%Actions performed before each simulation batch
obj.params.springConst     = -(obj.params.dimension*obj.params.diffusionConst/obj.params.b^2)*ones(obj.params.numBeads); % can be a scalar or a matrix the size of (numBeads) X (numBeads)

% set spring constant for the connected beads
for cIdx = 1:size(obj.params.connectedBeads,1)
    obj.params.springConst(obj.params.connectedBeads(cIdx,1), obj.params.connectedBeads(cIdx,2))=obj.params.springConst(obj.params.connectedBeads(cIdx,1), obj.params.connectedBeads(cIdx,2))*obj.round;
    obj.params.springConst(obj.params.connectedBeads(cIdx,2), obj.params.connectedBeads(cIdx,1))=obj.params.springConst(obj.params.connectedBeads(cIdx,2), obj.params.connectedBeads(cIdx,1))*obj.round;
end

<func> PreRunActions </func>
%Actions performed before each simulation run.
%Note that SimpleRouse class is initialized before each simulation
<func> PreStepActions </func>
%Actions performed before each step of the Rouse chain.
<func> PostStepActions </func>
%Actions performed before each step of the Rouse chain.
<func> PostRunActions </func>
%Actions performed sfter each simulation run.
<func> PostSimulationBatchActions </func>
%Actions performed before each simulation batch.

% Calculate the ratio (P(connectedBeads)/E[p(1)])^1.5 and compare it to the ratio between the spring constants 
s = sum(sum(obj.beadEncounterHistogram.twoSides(:,:,obj.round)));
ts = obj.beadEncounterHistogram.twoSides(:,:,obj.round)./s;
p(1) = mean(ts(:,obj.params.numBeads+1));
d    = diff(obj.params.connectedBeads);
pHat = obj.beadEncounterProbability.twoSides(1,obj.params.numBeads+d,obj.round);
kRatio = (pHat/p(1))^(1.5);
obj.userData.kRatio(obj.round) =kRatio;
