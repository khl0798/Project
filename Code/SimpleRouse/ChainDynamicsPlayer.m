classdef ChainDynamicsPlayer<handle
    properties
        params
        handles
        chain
        affineBeads
        connectedBeads
        play = false;
    end
    
    methods
        function obj = ChainDynamicsPlayer(rouseChain)
            % construct the class with rouseChain (from SimpleRouse Class)
            if exist('rouseChain','var')
                obj.handles.classes.rouseChain = rouseChain;
                obj.affineBeads      = rouseChain.params.affineBeadsNum;
                obj.connectedBeads   = rouseChain.params.connectedBeads; 
                obj.chain            = rouseChain.savedPosition;
                obj.params.dimension = rouseChain.params.dimension;
                obj.params.numSteps = rouseChain.step;
                obj.CreateControls
                obj.Display(1);
            end
        end
        
        function CreateControls(obj)
            obj.handles.graphical.mainFigure = figure('Units','norm');
            obj.handles.graphical.mainAxes  = axes('Units','norm',...
                'Parent',obj.handles.graphical.mainFigure);
            obj.handles.graphical.cameraToolBar = cameratoolbar(obj.handles.graphical.mainFigure);
            obj.SetAxesLimits
            obj.handles.graphical.stepSlider = uicontrol('Parent',obj.handles.graphical.mainFigure,...
                'Style','slider',...
                'Max',obj.params.numSteps,...
                'Min', 1,...
                'Units','norm',...
                'Value',1,...
                'Position',[0.95, 0, 0.05, 0.5],...
                'SliderStep',[1/(obj.params.numSteps-1), 1/(obj.params.numSteps-1)],...
                'Callback',@obj.MoveSlider);
            
            obj.handles.graphical.playButton = uicontrol('Parent',obj.handles.graphical.mainFigure,...
                'Units','norm',...
                'Position',[0.95, 0.55,0.05,0.05],...
                'String','Play',...
                'Callback',@obj.Play);
            
            % initial chain display
            obj.handles.graphical.chain = line('XData',obj.chain(:,1,1),...
                'YData',obj.chain(:,2,1),...
                'ZData',obj.chain(:,3,1),...
                'Parent',obj.handles.graphical.mainAxes,...
                'Marker','o');
            for aIdx = 1:size(obj.affineBeads,1)
                obj.handles.graphical.affineBeads(aIdx) = line('XData',obj.chain(obj.affineBeads(aIdx,:),1,1),...
                    'YData',obj.chain(obj.affineBeads(aIdx,:),2,1),...
                    'ZData',obj.chain(obj.affineBeads(aIdx,:),3,1),...
                    'Parent',obj.handles.graphical.mainAxes,...
                    'Marker','o',...
                    'LineStyle','none',...
                    'MarkerFaceColor',rand(1,3));
            end
            
            for cIdx = 1:size(obj.connectedBeads,1)
                obj.handles.graphicsl.connectedBeads(cIdx) = line(...
                    'XData',[obj.chain(obj.connectedBeads(cIdx,1),1,1) obj.chain(obj.connectedBeads(cIdx,2),1,1)],...
                    'YData',[obj.chain(obj.connectedBeads(cIdx,1),2,1),obj.chain(obj.connectedBeads(cIdx,2),2,1)],...
                    'ZData',[obj.chain(obj.connectedBeads(cIdx,1),3,1),obj.chain(obj.connectedBeads(cIdx,2),3,1)],...
                    'Parent',obj.handles.graphical.mainAxes,...
                    'Marker','o',...
                    'LineStyle','-',...
                    'MarkerFaceColor','b');
            end
            
        end
        
        function Display(obj,stepNum)
            
            set(obj.handles.graphical.chain,'XData',obj.chain(:,1,stepNum),...
                'YData',obj.chain(:,2,stepNum),...
                'ZData',obj.chain(:,3,stepNum),...
                'Parent',obj.handles.graphical.mainAxes);
            for aIdx = 1:size(obj.affineBeads,1)
                set(obj.handles.graphical.affineBeads(aIdx),'XData',obj.chain(obj.affineBeads(aIdx,:),1,stepNum),...
                    'YData',obj.chain(obj.affineBeads(aIdx,:),2,stepNum),...
                    'ZData',obj.chain(obj.affineBeads(aIdx,:),3,stepNum),...
                    'Parent',obj.handles.graphical.mainAxes,...
                    'Marker','o',...
                    'LineStyle','none');
            end
            
            for cIdx = 1:size(obj.connectedBeads,1)
                 set(obj.handles.graphicsl.connectedBeads(cIdx),....
                    'XData',[obj.chain(obj.connectedBeads(cIdx,1),1,stepNum) obj.chain(obj.connectedBeads(cIdx,2),1,stepNum)],...
                    'YData',[obj.chain(obj.connectedBeads(cIdx,1),2,stepNum),obj.chain(obj.connectedBeads(cIdx,2),2,stepNum)],...
                    'ZData',[obj.chain(obj.connectedBeads(cIdx,1),3,stepNum),obj.chain(obj.connectedBeads(cIdx,2),3,stepNum)],...
                    'Parent',obj.handles.graphical.mainAxes,...
                    'Marker','o',...
                    'LineStyle','-',...
                    'MarkerFaceColor','b');
            end
            drawnow
        end
        
        function Play(obj,bHandle,varargin)
            cStep = get(obj.handles.graphical.stepSlider,'Value');
            if strcmpi(get(bHandle,'String'),'Play')
                set(bHandle,'String','Pause')
                obj.play = true;
                while obj.play
                    cStep = cStep+1;
                    set(obj.handles.graphical.stepSlider,'Value',round(cStep))
                    obj.Display(round(cStep))
                    if cStep>=obj.params.numSteps-2
                        obj.play = false;
                    end
                end
            else
                obj.play = false;
                set(bHandle,'String','Play')
            end
        end
        
        function SetAxesLimits(obj)
            x =obj.chain(:,1,:);
            x = x(:);
            y = obj.chain(:,2,:);
            y = y(:);
            z = obj.chain(:,3,:);
            z = z(:);
            maxX = max(x);
            minX = min(x);
            maxY = max(y);
            minY = min(y);
            maxZ = max(z);
            minZ = min(z);
            set(obj.handles.graphical.mainAxes,'XLim',[minX,maxX],...
                'YLim',[minY, maxY],...
                'ZLim',[minZ,maxZ]);
            
            
        end
        
        function MoveSlider(obj,sliderHandle,varargin)
            obj.Display(round(get(sliderHandle,'Value')));
        end
    end
    
end