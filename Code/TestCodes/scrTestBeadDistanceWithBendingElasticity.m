% scrTestMeanDistanceWithBendingElasticity
% a script to test the mean distance between beads in chains with or
% without bending elasticity force. This script is also used to test the
% force itself.
close all
simulationParams = SimulationFrameworkParams('dt',0.01,...
                                             'dimension',3,...
                                             'numSteps',500,...
                                             'objectInteraction',false,...
                                             'showSimulation',true);
    
% define open space domain 
domainForces = ForceManagerParams('diffusionForce',true,...
                                  'diffusionConst',1,...
                                  'dt',simulationParams.simulator.dt);

dp = DomainHandlerParams('domainShape','open',...
                         'dimension',simulationParams.simulator.dimension,...
                         'reflectionType','off',...
                         'domainCenter',[0 0 0],...
                         'forceParams',domainForces);
                     
% define two chain, one with bending elasticity and the other without
chain1Forces = ForceManagerParams('springForce',true,...
                                  'springConst',1,...
                                  'bendingElasticityForce',false,...
                                  'dt',simulationParams.simulator.dt,...                                 
                                  'minParticleEqDistance',0);
                              
cp(1) = ChainParams('numBeads',256,...
                    'b', sqrt(3),...
                    'forceParams',chain1Forces);
                
chain2Forces = ForceManagerParams('springForce',true,...
                                  'springConst',1,...
                                  'bendingElasticityForce',true,...
                                  'bendingConst',1/(4*simulationParams.simulator.dt),...
                                  'dt',simulationParams.simulator.dt,...
                                  'minParticleEqDistance',0);                
cp(2) = ChainParams('numBeads',256,...
                    'b', sqrt(3),...
                    'forceParams',chain2Forces);
simulationParams.SetChainParams(cp);
simulationParams.SetDomainParams(dp);                
r = RouseSimulatorFramework(simulationParams); 

r.PreSimulationBatchActions
r.PreRunActions;
md1 = 0;% mean distance between neighbors chain 1
md2 = 0;% mean distance between neighbors chain 2
me2e1 = 0;% mean end-to-end chain 1 
me2e2 = 0;% mean end-to-end chain 2
inds = diag(true(1,cp(1).numBeads-1),1) | diag(true(1,cp(1).numBeads-1),-1);
for sIdx = 1:r.params.simulator.numSteps
    r.Step
    
    dist1 = r.objectManager.GetObjectDistance(1);
    dist2 = r.objectManager.GetObjectDistance(2);
    md1   = (md1*(r.simulationData.step-1)+ mean(dist1(inds)))/r.simulationData.step;
    md2   = (md2*(r.simulationData.step-1)+ mean(dist2(inds)))/r.simulationData.step;
    me2e1 = (me2e1*(r.simulationData.step-1) + dist1(1,end))/(r.simulationData.step);
    me2e2 = (me2e2*(r.simulationData.step-1) + dist2(1,end))/(r.simulationData.step);
    
    
end
                
sprintf('%s%f%s%f','mean neighbors dist chain 1: ' , md1,' mean end-to-end chain1: ', me2e1)
sprintf('%s%f%s%f','mean neighbors dist chain 2: ' , md2,' mean end-to-end chain2: ', me2e2)